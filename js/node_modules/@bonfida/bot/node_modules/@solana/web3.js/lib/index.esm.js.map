{"version":3,"file":"index.esm.js","sources":["../src/util/to-buffer.js","../src/publickey.js","../src/account.js","../src/bpf-loader-deprecated.js","../src/layout.js","../src/util/shortvec-encoding.js","../src/message.js","../src/transaction.js","../src/sysvar.js","../src/agent-manager.js","../src/fee-calculator.js","../src/nonce-account.js","../src/timing.js","../src/util/sleep.js","../src/util/promise-timeout.js","../src/connection.js","../src/util/send-and-confirm-transaction.js","../src/instruction.js","../src/system-program.js","../src/loader.js","../src/bpf-loader.js","../src/stake-program.js","../src/secp256k1-program.js","../src/validator-info.js","../src/vote-account.js","../src/util/send-and-confirm-raw-transaction.js","../src/util/cluster.js","../src/index.js"],"sourcesContent":["// @flow\n\nimport {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (arr instanceof Buffer) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","// @flow\n\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport nacl from 'tweetnacl';\nimport {sha256} from 'crypto-hash';\nimport {Buffer} from 'buffer';\n\nlet naclLowLevel = nacl.lowlevel;\n\ntype PublicKeyNonce = [PublicKey, number]; // This type exists to workaround an esdoc parse error\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * A public key\n */\nexport class PublicKey {\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   */\n  constructor(value: number | string | Buffer | Uint8Array | Array<number>) {\n    if (typeof value === 'string') {\n      // assume base 58 encoding by default\n      const decoded = bs58.decode(value);\n      if (decoded.length != 32) {\n        throw new Error(`Invalid public key input`);\n      }\n      this._bn = new BN(decoded);\n    } else {\n      this._bn = new BN(value);\n    }\n\n    if (this._bn.byteLength() > 32) {\n      throw new Error(`Invalid public key input`);\n    }\n  }\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBuffer());\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Returns a string representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = await sha256(new Uint8Array(buffer));\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new Error(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, Buffer.from(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = await sha256(new Uint8Array(buffer));\n    let publicKeyBytes = new BN(hash, 16).toArray(null, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKeyNonce> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n}\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0,\n  0x4a0e,\n  0x1b27,\n  0xc4ee,\n  0xe478,\n  0xad2f,\n  0x1806,\n  0x2f43,\n  0xd7a7,\n  0x3dfb,\n  0x0099,\n  0x2b4d,\n  0xdf0b,\n  0x4fc1,\n  0x2480,\n  0x2b83,\n]);\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","// @flow\nimport nacl from 'tweetnacl';\nimport type {KeyPair} from 'tweetnacl';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n */\nexport class Account {\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return this._keypair.secretKey;\n  }\n}\n","// @flow\n\nimport {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","// @flow\n\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey'): Object => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): Object => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer, offset) => {\n    const data = _decode(buffer, offset);\n    return data.chars.toString('utf8');\n  };\n\n  rsl.encode = (str, buffer, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  rsl.alloc = str => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: Object, fields: Object): number {\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","// @flow\n\nexport function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","// @flow\n\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\n\n/**\n * The message header, identifying signed and read-only account\n *\n * @typedef {Object} MessageHeader\n * @property {number} numRequiredSignatures The number of signatures required for this message to be considered valid. The\n * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n * @property {number} numReadonlySignedAccounts: The last `numReadonlySignedAccounts` of the signed keys are read-only accounts\n * @property {number} numReadonlyUnsignedAccounts The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts\n */\nexport type MessageHeader = {\n  numRequiredSignatures: number,\n  numReadonlySignedAccounts: number,\n  numReadonlyUnsignedAccounts: number,\n};\n\n/**\n * An instruction to execute by a program\n *\n * @typedef {Object} CompiledInstruction\n * @property {number} programIdIndex Index into the transaction keys array indicating the program account that executes this instruction\n * @property {number[]} accounts Ordered indices into the transaction keys array indicating which accounts to pass to the program\n * @property {string} data The program input data encoded as base 58\n */\nexport type CompiledInstruction = {\n  programIdIndex: number,\n  accounts: number[],\n  data: string,\n};\n\n/**\n * Message constructor arguments\n *\n * @typedef {Object} MessageArgs\n * @property {MessageHeader} header The message header, identifying signed and read-only `accountKeys`\n * @property {string[]} accounts All the account keys used by this transaction\n * @property {Blockhash} recentBlockhash The hash of a recent ledger block\n * @property {CompiledInstruction[]} instructions Instructions that will be executed in sequence and committed in one atomic transaction if all succeed.\n */\ntype MessageArgs = {\n  header: MessageHeader,\n  accountKeys: string[],\n  recentBlockhash: Blockhash,\n  instructions: CompiledInstruction[],\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = bs58.decode(instruction.data);\n\n      let keyIndicesCount = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => key.toBuffer()),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift();\n    const numReadonlySignedAccounts = byteArray.shift();\n    const numReadonlyUnsignedAccounts = byteArray.shift();\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      let instruction = {};\n      instruction.programIdIndex = byteArray.shift();\n      const accountCount = shortvec.decodeLength(byteArray);\n      instruction.accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = byteArray.slice(0, dataLength);\n      instruction.data = bs58.encode(Buffer.from(data));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push(instruction);\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","// @flow\n\nimport invariant from 'assert';\nimport nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport type {CompiledInstruction} from './message';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport {Account} from './account';\nimport * as shortvec from './util/shortvec-encoding';\nimport type {Blockhash} from './blockhash';\n\n/**\n * @typedef {string} TransactionSignature\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n *\n * @typedef {Object} AccountMeta\n * @property {PublicKey} pubkey An account's public key\n * @property {boolean} isSigner True if an instruction requires a transaction signature matching `pubkey`\n * @property {boolean} isWritable True if the `pubkey` can be loaded as a read-write account.\n */\nexport type AccountMeta = {\n  pubkey: PublicKey,\n  isSigner: boolean,\n  isWritable: boolean,\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n *\n * @typedef {Object} TransactionInstructionCtorFields\n * @property {?Array<PublicKey>} keys\n * @property {?PublicKey} programId\n * @property {?Buffer} data\n */\nexport type TransactionInstructionCtorFields = {|\n  keys?: Array<AccountMeta>,\n  programId?: PublicKey,\n  data?: Buffer,\n|};\n\n/**\n * Configuration object for Transaction.serialize()\n *\n * @typedef {Object} SerializeConfig\n * @property {boolean|undefined} requireAllSignatures Require all transaction signatures be present (default: true)\n * @property {boolean|undefined} verifySignatures Verify provided signatures (default: true)\n */\nexport type SerializeConfig = {\n  requireAllSignatures?: boolean,\n  verifySignatures?: boolean,\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta> = [];\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts?: TransactionInstructionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n}\n\n/**\n * @private\n */\ntype SignaturePubkeyPair = {|\n  signature: Buffer | null,\n  publicKey: PublicKey,\n|};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n * @typedef {Object} TransactionCtorFields\n * @property {?Blockhash} recentBlockhash A recent blockhash\n * @property {?PublicKey} feePayer The transaction fee payer\n * @property {?Array<SignaturePubkeyPair>} signatures One or more signatures\n *\n */\ntype TransactionCtorFields = {|\n  recentBlockhash?: Blockhash | null,\n  nonceInfo?: NonceInformation | null,\n  feePayer?: PublicKey | null,\n  signatures?: Array<SignaturePubkeyPair>,\n|};\n\n/**\n * NonceInformation to be used to build a Transaction.\n *\n * @typedef {Object} NonceInformation\n * @property {Blockhash} nonce The current Nonce blockhash\n * @property {TransactionInstruction} nonceInstruction AdvanceNonceAccount Instruction\n */\ntype NonceInformation = {|\n  nonce: Blockhash,\n  nonceInstruction: TransactionInstruction,\n|};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer: ?PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash: ?Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo: ?NonceInformation;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields,\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      throw new Error('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @private\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified accounts. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Account>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Account>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @private\n   */\n  _partialSign(message: Message, ...signers: Array<Account>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, signature);\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @private\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @private\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @private\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(message: Message, signatures: Array<string>): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(\n            keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n          ),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","// @flow\nimport {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n","// @flow\n\nimport http from 'http';\nimport https from 'https';\n\nexport const DESTROY_TIMEOUT_MS = 5000;\n\nexport class AgentManager {\n  _agent: http.Agent | https.Agent;\n  _activeRequests = 0;\n  _destroyTimeout: TimeoutID | null = null;\n  _useHttps: boolean;\n\n  static _newAgent(useHttps: boolean): http.Agent | https.Agent {\n    const options = {keepAlive: true, maxSockets: 25};\n    if (useHttps) {\n      return new https.Agent(options);\n    } else {\n      return new http.Agent(options);\n    }\n  }\n\n  constructor(useHttps?: boolean) {\n    this._useHttps = useHttps === true;\n    this._agent = AgentManager._newAgent(this._useHttps);\n  }\n\n  requestStart(): http.Agent | https.Agent {\n    this._activeRequests++;\n    clearTimeout(this._destroyTimeout);\n    this._destroyTimeout = null;\n    return this._agent;\n  }\n\n  requestEnd() {\n    this._activeRequests--;\n    if (this._activeRequests === 0 && this._destroyTimeout === null) {\n      this._destroyTimeout = setTimeout(() => {\n        this._agent.destroy();\n        this._agent = AgentManager._newAgent(this._useHttps);\n      }, DESTROY_TIMEOUT_MS);\n    }\n  }\n}\n","// @flow\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @private\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * @typedef {Object} FeeCalculator\n * @property {number} lamportsPerSignature lamports Cost in lamports to validate a signature\n */\nexport type FeeCalculator = {\n  lamportsPerSignature: number,\n};\n","// @flow\nimport * as BufferLayout from 'buffer-layout';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @private\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    nonceAccount.authorizedPubkey = new PublicKey(\n      nonceAccount.authorizedPubkey,\n    );\n    nonceAccount.nonce = new PublicKey(nonceAccount.nonce).toString();\n    return nonceAccount;\n  }\n}\n","// @flow\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @ignore\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @ignore\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @ignore\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @ignore\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","// @flow\n\n// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","// @flow\n\nexport function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: TimeoutID;\n  const timeoutPromise = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then(result => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","// @flow\n\nimport assert from 'assert';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {parse as urlParse, format as urlFormat} from 'url';\nimport fetch from 'node-fetch';\nimport jayson from 'jayson/lib/client/browser';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\n\nimport {AgentManager} from './agent-manager';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {Account} from './account';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype TokenAccountsFilter =\n  | {|\n      mint: PublicKey,\n    |}\n  | {|\n      programId: PublicKey,\n    |};\n\n/**\n * Extra contextual information for RPC responses\n *\n * @typedef {Object} Context\n * @property {number} slot\n */\ntype Context = {\n  slot: number,\n};\n\n/**\n * Options for sending transactions\n *\n * @typedef {Object} SendOptions\n * @property {boolean | undefined} skipPreflight disable transaction verification step\n * @property {Commitment | undefined} preflightCommitment preflight commitment level\n */\nexport type SendOptions = {\n  skipPreflight?: boolean,\n  preflightCommitment?: Commitment,\n};\n\n/**\n * Options for confirming transactions\n *\n * @typedef {Object} ConfirmOptions\n * @property {boolean | undefined} skipPreflight disable transaction verification step\n * @property {Commitment | undefined} commitment desired commitment level\n * @property {Commitment | undefined} preflightCommitment preflight commitment level\n */\nexport type ConfirmOptions = {\n  skipPreflight?: boolean,\n  commitment?: Commitment,\n  preflightCommitment?: Commitment,\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n *\n * @typedef {Object} ConfirmedSignaturesForAddress2Options\n * @property {TransactionSignature | undefined} before start searching backwards from this transaction signature.\n *               If not provided the search starts from the highest max confirmed block.\n * @property {number | undefined} limit maximum transaction signatures to return (between 1 and 1,000, default: 1,000).\n *\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  before?: TransactionSignature,\n  limit?: number,\n};\n\n/**\n * RPC Response with extra contextual information\n *\n * @typedef {Object} RpcResponseAndContext\n * @property {Context} context\n * @property {T} value response\n */\ntype RpcResponseAndContext<T> = {\n  context: Context,\n  value: T,\n};\n\n/**\n * @private\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(unknown()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @private\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @private\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @private\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n *\n * @typedef {'processed' | 'confirmed' | 'finalized'} Commitment\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n *\n * @typedef {'circulating' | 'nonCirculating'} LargestAccountsFilter\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n *\n * @typedef {Object} GetLargestAccountsConfig\n * @property {Commitment|undefined} commitment The level of commitment desired\n * @property {LargestAccountsFilter|undefined} filter Filter largest accounts by whether they are part of the circulating supply\n */\ntype GetLargestAccountsConfig = {\n  commitment: ?Commitment,\n  filter: ?LargestAccountsFilter,\n};\n\n/**\n * Configuration object for changing query behavior\n *\n * @typedef {Object} SignatureStatusConfig\n * @property {boolean} searchTransactionHistory enable searching status history, not needed for recent transactions\n */\nexport type SignatureStatusConfig = {\n  searchTransactionHistory: boolean,\n};\n\n/**\n * Information describing a cluster node\n *\n * @typedef {Object} ContactInfo\n * @property {string} pubkey Identity public key of the node\n * @property {string|null} gossip Gossip network address for the node\n * @property {string|null} tpu TPU network address for the node (null if not available)\n * @property {string|null} rpc JSON RPC network address for the node (null if not available)\n * @property {string|null} version Software version of the node (null if not available)\n */\ntype ContactInfo = {\n  pubkey: string,\n  gossip: string | null,\n  tpu: string | null,\n  rpc: string | null,\n  version: string | null,\n};\n\n/**\n * Information describing a vote account\n *\n * @typedef {Object} VoteAccountInfo\n * @property {string} votePubkey Public key of the vote account\n * @property {string} nodePubkey Identity public key of the node voting with this account\n * @property {number} activatedStake The stake, in lamports, delegated to this vote account and activated\n * @property {boolean} epochVoteAccount Whether the vote account is staked for this epoch\n * @property {Array<Array<number>>} epochCredits Recent epoch voting credit history for this voter\n * @property {number} commission A percentage (0-100) of rewards payout owed to the voter\n * @property {number} lastVote Most recent slot voted on by this vote account\n */\ntype VoteAccountInfo = {\n  votePubkey: string,\n  nodePubkey: string,\n  activatedStake: number,\n  epochVoteAccount: boolean,\n  epochCredits: Array<[number, number, number]>,\n  commission: number,\n  lastVote: number,\n};\n\n/**\n * A collection of cluster vote accounts\n *\n * @typedef {Object} VoteAccountStatus\n * @property {Array<VoteAccountInfo>} current Active vote accounts\n * @property {Array<VoteAccountInfo>} delinquent Inactive vote accounts\n */\ntype VoteAccountStatus = {\n  current: Array<VoteAccountInfo>,\n  delinquent: Array<VoteAccountInfo>,\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n *\n * @typedef {Object} InflationGovernor\n * @property {number} foundation\n * @property {number} foundation_term\n * @property {number} initial\n * @property {number} taper\n * @property {number} terminal\n */\ntype InflationGovernor = {\n  foundation: number,\n  foundationTerm: number,\n  initial: number,\n  taper: number,\n  terminal: number,\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * Information about the current epoch\n *\n * @typedef {Object} EpochInfo\n * @property {number} epoch\n * @property {number} slotIndex\n * @property {number} slotsInEpoch\n * @property {number} absoluteSlot\n * @property {number} blockHeight\n * @property {number} transactionCount\n */\ntype EpochInfo = {\n  epoch: number,\n  slotIndex: number,\n  slotsInEpoch: number,\n  absoluteSlot: number,\n  blockHeight: number | null,\n  transactionCount: number | null,\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n *\n * @typedef {Object} EpochSchedule\n * @property {number} slotsPerEpoch The maximum number of slots in each epoch\n * @property {number} leaderScheduleSlotOffset The number of slots before beginning of an epoch to calculate a leader schedule for that epoch\n * @property {boolean} warmup Indicates whether epochs start short and grow\n * @property {number} firstNormalEpoch The first epoch with `slotsPerEpoch` slots\n * @property {number} firstNormalSlot The first slot of `firstNormalEpoch`\n */\ntype EpochSchedule = {\n  slotsPerEpoch: number,\n  leaderScheduleSlotOffset: number,\n  warmup: boolean,\n  firstNormalEpoch: number,\n  firstNormalSlot: number,\n};\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n *\n * @typedef {Object} LeaderSchedule\n */\ntype LeaderSchedule = {\n  [address: string]: number[],\n};\n\n// TODO: check if validating array(number()) is still extremely slow\nconst GetLeaderScheduleResult = record(string(), unknown());\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(pick({}));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Version info for a node\n *\n * @typedef {Object} Version\n * @property {string} solana-core Version of solana-core\n */\nconst Version = pick({\n  'solana-core': string(),\n  'feature-set': optional(nullable(number())),\n});\n\ntype SimulatedTransactionResponse = {\n  err: TransactionError | string | null,\n  logs: Array<string> | null,\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n  }),\n);\n\ntype ParsedInnerInstruction = {\n  index: number,\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[],\n};\n\ntype TokenBalance = {\n  accountIndex: number,\n  mint: string,\n  uiTokenAmount: TokenAmount,\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @typedef {Object} ParsedConfirmedTransactionMeta\n * @property {number} fee The fee charged for processing the transaction\n * @property {Array<ParsedInnerInstruction>} innerInstructions An array of cross program invoked parsed instructions\n * @property {Array<number>} preBalances The balances of the transaction accounts before processing\n * @property {Array<number>} postBalances The balances of the transaction accounts after processing\n * @property {Array<string>} logMessages An array of program log messages emitted during a transaction\n * @property {Array<TokenBalance>} preTokenBalances The token balances of the transaction accounts before processing\n * @property {Array<TokenBalance>} postTokenBalances The token balances of the transaction accounts after processing\n * @property {object|null} err The error result of transaction processing\n */\ntype ParsedConfirmedTransactionMeta = {\n  fee: number,\n  innerInstructions?: ParsedInnerInstruction[],\n  preBalances: Array<number>,\n  postBalances: Array<number>,\n  logMessages?: Array<string>,\n  preTokenBalances?: Array<TokenBalance>,\n  postTokenBalances?: Array<TokenBalance>,\n  err: TransactionError | null,\n};\n\ntype CompiledInnerInstruction = {\n  index: number,\n  instructions: CompiledInstruction[],\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n *\n * @typedef {Object} ConfirmedTransactionMeta\n * @property {number} fee The fee charged for processing the transaction\n * @property {Array<CompiledInnerInstruction>} innerInstructions An array of cross program invoked instructions\n * @property {Array<number>} preBalances The balances of the transaction accounts before processing\n * @property {Array<number>} postBalances The balances of the transaction accounts after processing\n * @property {Array<string>} logMessages An array of program log messages emitted during a transaction\n * @property {Array<TokenBalance>} preTokenBalances The token balances of the transaction accounts before processing\n * @property {Array<TokenBalance>} postTokenBalances The token balances of the transaction accounts after processing\n * @property {object|null} err The error result of transaction processing\n */\ntype ConfirmedTransactionMeta = {\n  fee: number,\n  innerInstructions?: CompiledInnerInstruction[],\n  preBalances: Array<number>,\n  postBalances: Array<number>,\n  logMessages?: Array<string>,\n  preTokenBalances?: Array<TokenBalance>,\n  postTokenBalances?: Array<TokenBalance>,\n  err: TransactionError | null,\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @typedef {Object} ConfirmedTransaction\n * @property {number} slot The slot during which the transaction was processed\n * @property {Transaction} transaction The details of the transaction\n * @property {ConfirmedTransactionMeta|null} meta Metadata produced from the transaction\n * @property {number|null|undefined} blockTime The unix timestamp of when the transaction was processed\n */\ntype ConfirmedTransaction = {\n  slot: number,\n  transaction: Transaction,\n  meta: ConfirmedTransactionMeta | null,\n  blockTime?: number | null,\n};\n\n/**\n * A partially decoded transaction instruction\n *\n * @typedef {Object} ParsedMessageAccount\n * @property {PublicKey} pubkey Public key of the account\n * @property {PublicKey} accounts Indicates if the account signed the transaction\n * @property {string} data Raw base-58 instruction data\n */\ntype PartiallyDecodedInstruction = {|\n  programId: PublicKey,\n  accounts: Array<PublicKey>,\n  data: string,\n|};\n\n/**\n * A parsed transaction message account\n *\n * @typedef {Object} ParsedMessageAccount\n * @property {PublicKey} pubkey Public key of the account\n * @property {boolean} signer Indicates if the account signed the transaction\n * @property {boolean} writable Indicates if the account is writable for this transaction\n */\ntype ParsedMessageAccount = {\n  pubkey: PublicKey,\n  signer: boolean,\n  writable: boolean,\n};\n\n/**\n * A parsed transaction instruction\n *\n * @typedef {Object} ParsedInstruction\n * @property {string} program Name of the program for this instruction\n * @property {PublicKey} programId ID of the program for this instruction\n * @property {any} parsed Parsed instruction info\n */\ntype ParsedInstruction = {|\n  program: string,\n  programId: PublicKey,\n  parsed: any,\n|};\n\n/**\n * A parsed transaction message\n *\n * @typedef {Object} ParsedMessage\n * @property {Array<ParsedMessageAccount>} accountKeys Accounts used in the instructions\n * @property {Array<ParsedInstruction | PartiallyDecodedInstruction>} instructions The atomically executed instructions for the transaction\n * @property {string} recentBlockhash Recent blockhash\n */\ntype ParsedMessage = {\n  accountKeys: ParsedMessageAccount[],\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[],\n  recentBlockhash: string,\n};\n\n/**\n * A parsed transaction\n *\n * @typedef {Object} ParsedTransaction\n * @property {Array<string>} signatures Signatures for the transaction\n * @property {ParsedMessage} message Message of the transaction\n */\ntype ParsedTransaction = {\n  signatures: Array<string>,\n  message: ParsedMessage,\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @typedef {Object} ParsedConfirmedTransaction\n * @property {number} slot The slot during which the transaction was processed\n * @property {ParsedTransaction} transaction The details of the transaction\n * @property {ConfirmedTransactionMeta|null} meta Metadata produced from the transaction\n * @property {number|null|undefined} blockTime The unix timestamp of when the transaction was processed\n */\ntype ParsedConfirmedTransaction = {\n  slot: number,\n  transaction: ParsedTransaction,\n  meta: ParsedConfirmedTransactionMeta | null,\n  blockTime?: number | null,\n};\n\n/**\n * A ConfirmedBlock on the ledger\n *\n * @typedef {Object} ConfirmedBlock\n * @property {Blockhash} blockhash Blockhash of this block\n * @property {Blockhash} previousBlockhash Blockhash of this block's parent\n * @property {number} parentSlot Slot index of this block's parent\n * @property {Array<object>} transactions Vector of transactions and status metas\n * @property {Array<object>} rewards Vector of block rewards\n */\ntype ConfirmedBlock = {\n  blockhash: Blockhash,\n  previousBlockhash: Blockhash,\n  parentSlot: number,\n  transactions: Array<{\n    transaction: Transaction,\n    meta: ConfirmedTransactionMeta | null,\n  }>,\n  rewards: Array<{\n    pubkey: string,\n    lamports: number,\n    postBalance: number | null,\n    rewardType: string | null,\n  }>,\n};\n\n/**\n * A performance sample\n *\n * @typedef {Object} PerfSample\n * @property {number} slot Slot number of sample\n * @property {number} numTransactions Number of transactions in a sample window\n * @property {number} numSlots Number of slots in a sample window\n * @property {number} samplePeriodSecs Sample window in seconds\n */\ntype PerfSample = {\n  slot: number,\n  numTransactions: number,\n  numSlots: number,\n  samplePeriodSecs: number,\n};\n\nfunction createRpcRequest(url: string, useHttps: boolean): RpcRequest {\n  let agentManager;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  const server = jayson(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res = {};\n      let waitTime = 500;\n      for (;;) {\n        res = await fetch(url, options);\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  });\n\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      server.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n *\n * @typedef {Object} Supply\n * @property {number} total Total supply in lamports\n * @property {number} circulating Circulating supply in lamports\n * @property {number} nonCirculating Non-circulating supply in lamports\n * @property {Array<PublicKey>} nonCirculatingAccounts List of non-circulating account addresses\n */\ntype Supply = {\n  total: number,\n  circulating: number,\n  nonCirculating: number,\n  nonCirculatingAccounts: Array<PublicKey>,\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n *\n * @typedef {Object} TokenAmount\n * @property {string} amount Raw amount of tokens as string ignoring decimals\n * @property {number} decimals Number of decimals configured for token's mint\n * @property {number | null} uiAmount Token amount as float, accounts for decimals\n * @property {string | undefined} uiAmountString Token amount as string, accounts for decimals\n */\ntype TokenAmount = {\n  amount: string,\n  decimals: number,\n  uiAmount: number | null,\n  uiAmountString?: string,\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(nullable(string())),\n});\n\n/**\n * Token address and balance.\n *\n * @typedef {Object} TokenAccountBalancePair\n * @property {PublicKey} address Address of the token account\n * @property {string} amount Raw amount of tokens as string ignoring decimals\n * @property {number} decimals Number of decimals configured for token's mint\n * @property {number | null} uiAmount Token amount as float, accounts for decimals\n * @property {string | undefined} uiAmountString Token amount as string, accounts for decimals\n */\ntype TokenAccountBalancePair = {\n  address: PublicKey,\n  amount: string,\n  decimals: number,\n  uiAmount: number,\n  uiAmountString?: string,\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(nullable(string())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n *\n * @typedef {Object} AccountBalancePair\n * @property {PublicKey} address\n * @property {number} lamports\n */\ntype AccountBalancePair = {\n  address: PublicKey,\n  lamports: number,\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @private\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @private\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @private\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @private\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress\" message\n */\nconst GetConfirmedSignaturesForAddressRpcResult = jsonRpcResult(\n  array(string()),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @private\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @private\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(SignatureStatusResult),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(nullable(string())),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\n/**\n * @private\n */\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TransactionFromConfirmed = coerce(\n  instance(Transaction),\n  ConfirmedTransactionResult,\n  result => {\n    const {message, signatures} = result;\n    return Transaction.populate(new Message(message), signatures);\n  },\n);\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @private\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @private\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @private\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\nexport const GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: TransactionFromConfirmed,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: TransactionFromConfirmed,\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetParsedConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n *\n * @typedef {Object} SlotInfo\n * @property {number} slot Currently processing slot\n * @property {number} parent Parent of the current slot\n * @property {number} root The root block of the current slot's fork\n */\nexport type SlotInfo = {\n  slot: number,\n  parent: number,\n  root: number,\n};\n\n/**\n * Parsed account data\n *\n * @typedef {Object} ParsedAccountData\n * @property {string} program Name of the program that owns this account\n * @property {any} parsed Parsed account data\n * @property {number} space Space used by account data\n */\ntype ParsedAccountData = {\n  program: string,\n  parsed: any,\n  space: number,\n};\n\n/**\n * Stake Activation data\n *\n * @typedef {Object} StakeActivationData\n * @property {string} state: <string - the stake account's activation state, one of: active, inactive, activating, deactivating\n * @property {number} active: stake active during the epoch\n * @property {number} inactive: stake inactive during the epoch\n */\ntype StakeActivationData = {\n  state: 'active' | 'inactive' | 'activating' | 'deactivating',\n  active: number,\n  inactive: number,\n};\n\n/**\n * Information describing an account\n *\n * @typedef {Object} AccountInfo\n * @property {number} lamports Number of lamports assigned to the account\n * @property {PublicKey} owner Identifier of the program that owns the account\n * @property {T} data Optional data assigned to the account\n * @property {boolean} executable `true` if this account's data contains a loaded program\n */\ntype AccountInfo<T> = {\n  executable: boolean,\n  owner: PublicKey,\n  lamports: number,\n  data: T,\n};\n\n/**\n * Account information identified by pubkey\n *\n * @typedef {Object} KeyedAccountInfo\n * @property {PublicKey} accountId\n * @property {AccountInfo<Buffer>} accountInfo\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey,\n  accountInfo: AccountInfo<Buffer>,\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @private\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @private\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string, // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback,\n  commitment: ?Commitment,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @private\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string, // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback,\n  commitment: ?Commitment,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @private\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * @private\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature, // TransactionSignature as a base 58 string\n  callback: SignatureResultCallback,\n  commitment: ?Commitment,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @private\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Signature result\n *\n * @typedef {Object} SignatureResult\n */\nexport type SignatureResult = {|\n  err: TransactionError | null,\n|};\n\n/**\n * Transaction error\n *\n * @typedef {Object} TransactionError\n */\nexport type TransactionError = {};\n\n/**\n * Signature status\n *\n * @typedef {Object} SignatureStatus\n * @property {number} slot when the transaction was processed\n * @property {number | null} confirmations the number of blocks that have been confirmed and voted on in the fork containing `slot` (TODO)\n * @property {TransactionError | null} err error, if any\n * @property {string | null} confirmationStatus the transaction's cluster confirmation status, if data available. Possible non-null responses: `processed`, `confirmed`, `finalized`\n */\nexport type SignatureStatus = {\n  slot: number,\n  confirmations: number | null,\n  err: TransactionError | null,\n  confirmationStatus: string | null,\n};\n\n/**\n * A confirmed signature with its status\n *\n * @typedef {Object} ConfirmedSignatureInfo\n * @property {string} signature the transaction signature\n * @property {number} slot when the transaction was processed\n * @property {TransactionError | null} err error, if any\n * @property {string | null} memo memo associated with the transaction, if any\n * @property {number | null | undefined} blockTime The unix timestamp of when the transaction was processed\n */\nexport type ConfirmedSignatureInfo = {\n  signature: string,\n  slot: number,\n  err: TransactionError | null,\n  memo: string | null,\n  blockTime?: number | null,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  _rpcEndpoint: string;\n  _rpcRequest: RpcRequest;\n  _rpcWebSocket: RpcWebSocketClient;\n  _rpcWebSocketConnected: boolean = false;\n  _rpcWebSocketHeartbeat: IntervalID | null = null;\n  _rpcWebSocketIdleTimeout: TimeoutID | null = null;\n\n  _commitment: ?Commitment;\n  _blockhashInfo: {\n    recentBlockhash: Blockhash | null,\n    lastFetch: Date,\n    simulatedSignatures: Array<string>,\n    transactionSignatures: Array<string>,\n  };\n  _disableBlockhashCaching: boolean = false;\n  _pollingBlockhash: boolean = false;\n  _accountChangeSubscriptions: {[number]: AccountSubscriptionInfo} = {};\n  _accountChangeSubscriptionCounter: number = 0;\n  _programAccountChangeSubscriptions: {\n    [number]: ProgramAccountSubscriptionInfo,\n  } = {};\n  _programAccountChangeSubscriptionCounter: number = 0;\n  _slotSubscriptions: {\n    [number]: SlotSubscriptionInfo,\n  } = {};\n  _slotSubscriptionCounter: number = 0;\n  _signatureSubscriptions: {\n    [number]: SignatureSubscriptionInfo,\n  } = {};\n  _signatureSubscriptionCounter: number = 0;\n  _rootSubscriptions: {\n    [number]: RootSubscriptionInfo,\n  } = {};\n  _rootSubscriptionCounter: number = 0;\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitment optional default commitment level\n   */\n  constructor(endpoint: string, commitment: ?Commitment) {\n    this._rpcEndpoint = endpoint;\n\n    let url = urlParse(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    this._rpcRequest = createRpcRequest(url.href, useHttps);\n    this._commitment = commitment;\n    this._blockhashInfo = {\n      recentBlockhash: null,\n      lastFetch: new Date(0),\n      transactionSignatures: [],\n      simulatedSignatures: [],\n    };\n\n    url.protocol = useHttps ? 'wss:' : 'ws:';\n    url.host = '';\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    if (url.port !== null) {\n      url.port = String(Number(url.port) + 1);\n    }\n    this._rpcWebSocket = new RpcWebSocketClient(urlFormat(url), {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): ?Commitment {\n    return this._commitment;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if (res.error) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if (res.error) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if (res.error) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if (res.error) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if (res.error) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if (res.error) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if (res.error) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>,\n    >,\n  > {\n    let _args = [ownerAddress.toBase58()];\n    if (filter.mint) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if (res.error) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>,\n    >,\n  > {\n    let _args = [ownerAddress.toBase58()];\n    if (filter.mint) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if (res.error) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config: ?GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if (res.error) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if (res.error) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if (res.error) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>,\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if (res.error) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n    epoch: ?number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if (res.error) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>> {\n    const args = this._buildArgs([programId.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if (res.error) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey,\n      account: AccountInfo<Buffer | ParsedAccountData>,\n    }>,\n  > {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if (res.error) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result, context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve();\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip': {\n        timeoutMs = 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'finalized':\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if (res.error) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment: ?Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if (res.error) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment: ?Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if (res.error) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment: ?Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if (res.error) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config: ?SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config: ?SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if (res.error) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment: ?Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if (res.error) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   */\n  async getTotalSupply(commitment: ?Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTotalSupply', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if (res.error) {\n      throw new Error('failed to get total supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment: ?Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if (res.error) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment: ?Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if (res.error) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if (res.error) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if (res.error) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment: ?Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if (res.error) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   */\n  async getRecentBlockhashAndContext(\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>,\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if (res.error) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit: ?number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if (res.error) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if (res.error) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value.feeCalculator,\n    };\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   */\n  async getRecentBlockhash(\n    commitment: ?Commitment,\n  ): Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(Version));\n    if (res.error) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block\n   */\n  async getConfirmedBlock(slot: number): Promise<ConfirmedBlock> {\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', [slot]);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n    if (res.error) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n  ): Promise<ConfirmedTransaction | null> {\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', [\n      signature,\n    ]);\n    const res = create(unsafeRes, GetConfirmedTransactionRpcResult);\n    if (res.error) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', [\n      signature,\n      'jsonParsed',\n    ]);\n    const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n    if (res.error) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress',\n      [address.toBase58(), startSlot, endSlot],\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddressRpcResult);\n    if (res.error) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options: ?ConfirmedSignaturesForAddress2Options,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      [address.toBase58(), options],\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if (res.error) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified account\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    amount: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      amount,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if (res.error) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      // Attempt to use a recent blockhash for up to 30 seconds\n      const expired =\n        Date.now() - this._blockhashInfo.lastFetch >=\n        BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: new Date(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transaction: Transaction,\n    signers?: Array<Account>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        // If the signature of this transaction has not been seen before with the\n        // current recentBlockhash, all done.\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          disableCache = true;\n        }\n      }\n    }\n\n    const signData = transaction.serializeMessage();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n    const args = [encodedTransaction, config];\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if (res.error) {\n      throw new Error('failed to simulate transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Account>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        // If the signature of this transaction has not been seen before with the\n        // current recentBlockhash, all done.\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options: ?SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options: ?SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const args = [encodedTransaction, config];\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if (res.error) {\n      if (res.error.data) {\n        const logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new Error('failed to send transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * @private\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @private\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @private\n   */\n  _wsOnClose(code: number) {\n    clearInterval(this._rpcWebSocketHeartbeat);\n    this._rpcWebSocketHeartbeat = null;\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @private\n   */\n  async _subscribe<SubInfo: {subscriptionId: ?SubscriptionId}, RpcArgs>(\n    sub: SubInfo,\n    rpcMethod: string,\n    rpcArgs: RpcArgs,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        console.error(`${rpcMethod} error for argument`, rpcArgs, err.message);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _unsubscribe<SubInfo: {subscriptionId: ?SubscriptionId}>(\n    sub: SubInfo,\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        console.error(`${rpcMethod} error:`, err.message);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _resetSubscriptions() {\n    (Object.values(this._accountChangeSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._programAccountChangeSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._signatureSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._slotSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._rootSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @private\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          this._rpcWebSocket.close();\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      this._subscribe(\n        sub,\n        'signatureSubscribe',\n        this._buildArgs([sub.signature], sub.commitment),\n      );\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnAccountNotification(notification: Object) {\n    const res = create(notification, AccountNotificationResult);\n    if (res.error) {\n      throw new Error('account notification failed: ' + res.error.message);\n    }\n    const keys = Object.keys(this._accountChangeSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._accountChangeSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment: ?Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = create(notification, ProgramAccountNotificationResult);\n    if (res.error) {\n      throw new Error(\n        'program account notification failed: ' + res.error.message,\n      );\n    }\n    const keys = Object.keys(this._programAccountChangeSubscriptions).map(\n      Number,\n    );\n    for (let id of keys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        const {value, context} = res.result;\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: value.account,\n          },\n          context,\n        );\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment: ?Commitment,\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = create(notification, SlotNotificationResult);\n    if (res.error) {\n      throw new Error('slot notification failed: ' + res.error.message);\n    }\n    const keys = Object.keys(this._slotSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._slotSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override: ?Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @private\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = create(notification, SignatureNotificationResult);\n    if (res.error) {\n      throw new Error('signature notification failed: ' + res.error.message);\n    }\n    const keys = Object.keys(this._signatureSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._signatureSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        // Signatures subscriptions are auto-removed by the RPC service so\n        // no need to explicitly send an unsubscribe message\n        delete this._signatureSubscriptions[id];\n        this._updateSubscriptions();\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment: ?Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = create(notification, RootNotificationResult);\n    if (res.error) {\n      throw new Error('root notification failed: ' + res.error.message);\n    }\n    const keys = Object.keys(this._rootSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._rootSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","// @flow\n\nimport {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {Account} from '../account';\nimport type {ConfirmOptions} from '../connection';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Account>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Account>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// @flow\n\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @typedef {Object} InstructionType\n * @property (index} The Instruction index (from solana upstream program)\n * @property (BufferLayout} The BufferLayout to use to build data\n */\nexport type InstructionType = {|\n  index: number,\n  layout: typeof BufferLayout,\n|};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n */\nexport function encodeData(type: InstructionType, fields: Object): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): Object {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {encodeData, decodeData} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\n\n/**\n * Create account system transaction params\n * @typedef {Object} CreateAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} newAccountPubkey\n * @property {number} lamports\n * @property {number} space\n * @property {PublicKey} programId\n */\nexport type CreateAccountParams = {|\n  fromPubkey: PublicKey,\n  newAccountPubkey: PublicKey,\n  lamports: number,\n  space: number,\n  programId: PublicKey,\n|};\n\n/**\n * Transfer system transaction params\n * @typedef {Object} TransferParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n */\nexport type TransferParams = {|\n  fromPubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Assign system transaction params\n * @typedef {Object} AssignParams\n * @property {PublicKey} accountPubkey\n * @property {PublicKey} programId\n */\nexport type AssignParams = {|\n  accountPubkey: PublicKey,\n  programId: PublicKey,\n|};\n\n/**\n * Create account with seed system transaction params\n * @typedef {Object} CreateAccountWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} newAccountPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {number} lamports\n * @property {number} space\n * @property {PublicKey} programId\n */\nexport type CreateAccountWithSeedParams = {|\n  fromPubkey: PublicKey,\n  newAccountPubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  lamports: number,\n  space: number,\n  programId: PublicKey,\n|};\n\n/**\n * Create nonce account system transaction params\n * @typedef {Object} CreateNonceAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {number} lamports\n */\nexport type CreateNonceAccountParams = {|\n  fromPubkey: PublicKey,\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Create nonce account with seed system transaction params\n * @typedef {Object} CreateNonceAccountWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {number} lamports\n */\nexport type CreateNonceAccountWithSeedParams = {|\n  fromPubkey: PublicKey,\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  lamports: number,\n  basePubkey: PublicKey,\n  seed: string,\n|};\n\n/**\n * Initialize nonce account system instruction params\n * @typedef {Object} InitializeNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n */\nexport type InitializeNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n|};\n\n/**\n * Advance nonce account system instruction params\n * @typedef {Object} AdvanceNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n */\nexport type AdvanceNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n|};\n\n/**\n * Withdraw nonce account system transaction params\n * @typedef {Object} WithdrawNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n */\nexport type WithdrawNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Authorize nonce account system transaction params\n * @typedef {Object} AuthorizeNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} newAuthorizedPubkey\n */\nexport type AuthorizeNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  newAuthorizedPubkey: PublicKey,\n|};\n\n/**\n * Allocate account system transaction params\n * @typedef {Object} AllocateParams\n * @property {PublicKey} accountPubkey\n * @property {number} space\n */\nexport type AllocateParams = {|\n  accountPubkey: PublicKey,\n  space: number,\n|};\n\n/**\n * Allocate account with seed system transaction params\n * @typedef {Object} AllocateWithSeedParams\n * @property {PublicKey} accountPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {number} space\n * @property {PublicKey} programId\n */\nexport type AllocateWithSeedParams = {|\n  accountPubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  space: number,\n  programId: PublicKey,\n|};\n\n/**\n * Assign account with seed system transaction params\n * @typedef {Object} AssignWithSeedParams\n * @property {PublicKey} accountPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {PublicKey} programId\n */\nexport type AssignWithSeedParams = {|\n  accountPubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  programId: PublicKey,\n|};\n\n/**\n * Transfer with seed system transaction params\n * @typedef {Object} TransferWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} basePubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n * @property {string} seed\n * @property {PublicKey} programId\n */\nexport type TransferWithSeedParams = {|\n  fromPubkey: PublicKey,\n  basePubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n  seed: string,\n  programId: PublicKey,\n|};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type;\n    for (const t of Object.keys(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (SYSTEM_INSTRUCTION_LAYOUTS[t].index == typeIndex) {\n        type = t;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @private\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @private\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n * @typedef {'Create' | 'Assign' | 'Transfer' | 'CreateWithSeed'\n | 'AdvanceNonceAccount' | 'WithdrawNonceAccount' | 'InitializeNonceAccount'\n | 'AuthorizeNonceAccount'} SystemInstructionType\n */\nexport type SystemInstructionType = $Keys<typeof SYSTEM_INSTRUCTION_LAYOUTS>;\n\n/**\n * An enumeration of valid system InstructionType's\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * Public key that identifies the System program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('11111111111111111111111111111111');\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: params.programId.toBuffer(),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if (params.basePubkey) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: params.programId.toBuffer(),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if (params.basePubkey) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: params.basePubkey.toBuffer(),\n        seed: params.seed,\n        programId: params.programId.toBuffer(),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {programId: params.programId.toBuffer()});\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: params.basePubkey.toBuffer(),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: params.programId.toBuffer(),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if (params.basePubkey && params.seed) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: params.authorizedPubkey.toBuffer(),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: params.newAuthorizedPubkey.toBuffer(),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if (params.basePubkey) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: params.basePubkey.toBuffer(),\n        seed: params.seed,\n        space: params.space,\n        programId: params.programId.toBuffer(),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","// @flow\n\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\n\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport {SystemProgram} from './system-program';\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static get chunkSize(): number {\n    // Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n    // rest of the Transaction fields\n    //\n    // TODO: replace 300 with a proper constant for the size of the other\n    // Transaction fields\n    return PACKET_DATA_SIZE - 300;\n  }\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Account,\n    program: Account,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","// @flow\n\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Account,\n    program: Account,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {encodeData, decodeData} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\n\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\nexport class Authorized {\n  staker: PublicKey;\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\nexport class Lockup {\n  unixTimestamp: number;\n  epoch: number;\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n}\n\n/**\n * Create stake account transaction params\n * @typedef {Object} CreateStakeAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} stakePubkey\n * @property {Authorized} authorized\n * @property {Lockup} lockup\n * @property {number} lamports\n */\nexport type CreateStakeAccountParams = {|\n  fromPubkey: PublicKey,\n  stakePubkey: PublicKey,\n  authorized: Authorized,\n  lockup: Lockup,\n  lamports: number,\n|};\n\n/**\n * Create stake account with seed transaction params\n * @typedef {Object} CreateStakeAccountWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {Authorized} authorized\n * @property {Lockup} lockup\n * @property {number} lamports\n */\nexport type CreateStakeAccountWithSeedParams = {|\n  fromPubkey: PublicKey,\n  stakePubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  authorized: Authorized,\n  lockup: Lockup,\n  lamports: number,\n|};\n\n/**\n * Initialize stake instruction params\n * @typedef {Object} InitializeStakeParams\n * @property {PublicKey} stakePubkey\n * @property {Authorized} authorized\n * @property {Lockup} lockup\n */\nexport type InitializeStakeParams = {|\n  stakePubkey: PublicKey,\n  authorized: Authorized,\n  lockup: Lockup,\n|};\n\n/**\n * Delegate stake instruction params\n * @typedef {Object} DelegateStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} votePubkey\n */\nexport type DelegateStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  votePubkey: PublicKey,\n|};\n\n/**\n * Authorize stake instruction params\n * @typedef {Object} AuthorizeStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} newAuthorizedPubkey\n * @property {StakeAuthorizationType} stakeAuthorizationType\n * @property {PublicKey} custodianPubkey\n */\nexport type AuthorizeStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  newAuthorizedPubkey: PublicKey,\n  stakeAuthorizationType: StakeAuthorizationType,\n  custodianPubkey?: PublicKey,\n|};\n\n/**\n * Authorize stake instruction params using a derived key\n * @typedef {Object} AuthorizeWithSeedStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorityBase\n * @property {string} authoritySeed\n * @property {PublicKey} authorityOwner\n * @property {PublicKey} newAuthorizedPubkey\n * @property {StakeAuthorizationType} stakeAuthorizationType\n * @property {PublicKey} custodianPubkey\n */\nexport type AuthorizeWithSeedStakeParams = {|\n  stakePubkey: PublicKey,\n  authorityBase: PublicKey,\n  authoritySeed: string,\n  authorityOwner: PublicKey,\n  newAuthorizedPubkey: PublicKey,\n  stakeAuthorizationType: StakeAuthorizationType,\n  custodianPubkey?: PublicKey,\n|};\n\n/**\n * Split stake instruction params\n * @typedef {Object} SplitStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} splitStakePubkey\n * @property {number} lamports\n */\nexport type SplitStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  splitStakePubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Withdraw stake instruction params\n * @typedef {Object} WithdrawStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n * @property {PublicKey} custodianPubkey\n */\nexport type WithdrawStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n  custodianPubkey?: PublicKey,\n|};\n\n/**\n * Deactivate stake instruction params\n * @typedef {Object} DeactivateStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n */\nexport type DeactivateStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n|};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type;\n    for (const t of Object.keys(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (STAKE_INSTRUCTION_LAYOUTS[t].index == typeIndex) {\n        type = t;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @private\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @private\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n * @typedef { 'Initialize' | 'Authorize' | 'AuthorizeWithSeed' | 'Delegate' | 'Split' | 'Withdraw'\n | 'Deactivate' } StakeInstructionType\n */\nexport type StakeInstructionType = $Keys<typeof STAKE_INSTRUCTION_LAYOUTS>;\n\n/**\n * An enumeration of valid stake InstructionType's\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n      Layout.rustString('authoritySeed'),\n      Layout.publicKey('authorityOwner'),\n    ]),\n  },\n});\n\n/**\n * @typedef {Object} StakeAuthorizationType\n * @property (index} The Stake Authorization index (from solana-stake-program)\n */\nexport type StakeAuthorizationType = {|\n  index: number,\n|};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * Public key that identifies the Stake program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('Stake11111111111111111111111111111111111111');\n  }\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static get space(): number {\n    return 200;\n  }\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: authorized.staker.toBuffer(),\n        withdrawer: authorized.withdrawer.toBuffer(),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: lockup.custodian.toBuffer(),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: newAuthorizedPubkey.toBuffer(),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: newAuthorizedPubkey.toBuffer(),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: authorityOwner.toBuffer(),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: authorizedPubkey,\n        newAccountPubkey: splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n\n    return transaction.add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey,\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","// @flow\n\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport assert from 'assert';\nimport {keccak_256} from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n * @typedef {Object} CreateSecp256k1InstructionWithPublicKeyParams\n * @property {Buffer | Uint8Array | Array<number>} publicKey\n * @property {Buffer | Uint8Array | Array<number>} message\n * @property {Buffer | Uint8Array | Array<number>} signature\n * @property {number} recoveryId\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {|\n  publicKey: Buffer | Uint8Array | Array<number>,\n  message: Buffer | Uint8Array | Array<number>,\n  signature: Buffer | Uint8Array | Array<number>,\n  recoveryId: number,\n|};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n * @typedef {Object} CreateSecp256k1InstructionWithEthAddressParams\n * @property {Buffer | Uint8Array | Array<number>} ethAddress\n * @property {Buffer | Uint8Array | Array<number>} message\n * @property {Buffer | Uint8Array | Array<number>} signature\n * @property {number} recoveryId\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {|\n  ethAddress: Buffer | Uint8Array | Array<number> | string,\n  message: Buffer | Uint8Array | Array<number>,\n  signature: Buffer | Uint8Array | Array<number>,\n  recoveryId: number,\n|};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n * @typedef {Object} CreateSecp256k1InstructionWithPrivateKeyParams\n * @property {Buffer | Uint8Array | Array<number>} privateKey\n * @property {Buffer | Uint8Array | Array<number>} message\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {|\n  privateKey: Buffer | Uint8Array | Array<number>,\n  message: Buffer | Uint8Array | Array<number>,\n|};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('KeccakSecp256k11111111111111111111111111111');\n  }\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256.update(toBuffer(publicKey)).digest()).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId} = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {ethAddress: rawAddress, message, signature, recoveryId} = params;\n\n    let ethAddress = rawAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: 0,\n        ethAddressOffset,\n        ethAddressInstructionIndex: 0,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: 0,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","// @flow\n\nimport {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @private\n */\ntype ConfigKey = {|\n  publicKey: PublicKey,\n  isSigner: boolean,\n|};\n\n/**\n * Info used to identity validators.\n *\n * @typedef {Object} Info\n * @property {string} name validator name\n * @property {?string} website optional, validator website\n * @property {?string} details optional, extra information the validator chose to share\n * @property {?string} keybaseUsername optional, used to identify validators on keybase.io\n */\nexport type Info = {|\n  name: string,\n  website?: string,\n  details?: string,\n  keybaseUsername?: string,\n|};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","// @flow\nimport * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {|\n  slot: number,\n  confirmationCount: number,\n|};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {|\n  epoch: number,\n  credits: number,\n  prevCredits: number,\n|};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @private\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedVoterPubkey'),\n  Layout.publicKey('authorizedWithdrawerPubkey'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64('epoch'),\n  BufferLayout.nu64('credits'),\n  BufferLayout.nu64('lastEpochCredits'),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n]);\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n    va.nodePubkey = new PublicKey(va.nodePubkey);\n    va.authorizedVoterPubkey = new PublicKey(va.authorizedVoterPubkey);\n    va.authorizedWithdrawerPubkey = new PublicKey(\n      va.authorizedWithdrawerPubkey,\n    );\n    if (!va.rootSlotValid) {\n      va.rootSlot = null;\n    }\n    return va;\n  }\n}\n","// @flow\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","//@flow\n\n/**\n * @private\n */\nconst endpoint = {\n  http: {\n    devnet: 'http://devnet.solana.com',\n    testnet: 'http://testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com',\n  },\n  https: {\n    devnet: 'https://devnet.solana.com',\n    testnet: 'https://testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","// @flow\nexport {Account} from './account';\nexport {BPF_LOADER_DEPRECATED_PROGRAM_ID} from './bpf-loader-deprecated';\nexport {BpfLoader, BPF_LOADER_PROGRAM_ID} from './bpf-loader';\nexport {Connection} from './connection';\nexport {Loader} from './loader';\nexport {Message} from './message';\nexport {NonceAccount, NONCE_ACCOUNT_LENGTH} from './nonce-account';\nexport {MAX_SEED_LENGTH, PublicKey} from './publickey';\nexport {\n  STAKE_CONFIG_ID,\n  Authorized,\n  Lockup,\n  StakeAuthorizationLayout,\n  StakeInstruction,\n  STAKE_INSTRUCTION_LAYOUTS,\n  StakeProgram,\n} from './stake-program';\nexport {\n  SystemInstruction,\n  SystemProgram,\n  SYSTEM_INSTRUCTION_LAYOUTS,\n} from './system-program';\nexport {Secp256k1Program} from './secp256k1-program';\nexport {Transaction, TransactionInstruction} from './transaction';\nexport {VALIDATOR_INFO_KEY, ValidatorInfo} from './validator-info';\nexport {VOTE_PROGRAM_ID, VoteAccount} from './vote-account';\nexport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_REWARDS_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n} from './sysvar';\nexport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nexport {sendAndConfirmRawTransaction} from './util/send-and-confirm-raw-transaction';\nexport {clusterApiUrl} from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"names":["toBuffer","arr","Buffer","Uint8Array","from","buffer","byteOffset","byteLength","naclLowLevel","nacl","lowlevel","MAX_SEED_LENGTH","PublicKey","constructor","value","decoded","bs58","decode","length","Error","_bn","BN","equals","publicKey","eq","toBase58","encode","b","toArrayLike","zeroPad","alloc","copy","toString","createWithSeed","fromPublicKey","seed","programId","concat","hash","sha256","createProgramAddress","seeds","forEach","publicKeyBytes","toArray","is_on_curve","findProgramAddress","nonce","address","seedsWithNonce","err","p","r","gf","t","chk","num","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","D","Z","A","pow2523","neq25519","I","a","c","d","pack25519","crypto_verify_32","Account","secretKey","_keypair","sign","keyPair","fromSecretKey","BPF_LOADER_DEPRECATED_PROGRAM_ID","property","BufferLayout","rustString","rsl","_decode","bind","_encode","offset","data","chars","str","span","authorized","lockup","getAlloc","type","fields","layout","item","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","push","PUBKEY_LENGTH","Message","args","header","accountKeys","map","account","recentBlockhash","instructions","isAccountWritable","index","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","serialize","numKeys","keyCount","shortvec","instruction","accounts","programIdIndex","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","PACKET_DATA_SIZE","instructionBufferLength","instructionLayout","slice","signDataLayout","Layout","transaction","keys","key","signData","byteArray","accountCount","i","messageArgs","DEFAULT_SIGNATURE","fill","SIGNATURE_LENGTH","TransactionInstruction","opts","Object","assign","Transaction","signature","signatures","add","items","compileMessage","nonceInfo","nonceInstruction","unshift","feePayer","programIds","accountMetas","accountMeta","includes","pubkey","isSigner","isWritable","sort","x","y","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","findIndex","feePayerIndex","payerMeta","splice","console","warn","signedKeys","unsignedKeys","indexOf","meta","invariant","keyIndex","_compile","message","valid","every","pair","serializeMessage","setSigners","signers","seen","Set","filter","has","uniqueSigners","signer","_partialSign","_verifySignatures","partialSign","detached","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","verify","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","DESTROY_TIMEOUT_MS","AgentManager","_newAgent","useHttps","options","keepAlive","maxSockets","https","Agent","http","_useHttps","_agent","requestStart","_activeRequests","clearTimeout","_destroyTimeout","requestEnd","setTimeout","destroy","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","fromAccountData","nonceAccount","authorizedPubkey","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","sleep","ms","Promise","resolve","promiseTimeout","promise","timeoutMs","timeoutId","timeoutPromise","race","then","result","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","createRpcResult","union","pick","jsonrpc","id","error","code","unknown","optional","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","context","slot","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetEpochInfoResult","epoch","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","boolean","firstNormalEpoch","firstNormalSlot","GetLeaderScheduleResult","record","TransactionErrorResult","nullable","SignatureStatusResult","Version","SimulatedTransactionResponseStruct","logs","array","createRpcRequest","url","agentManager","server","jayson","request","callback","agent","undefined","method","body","headers","too_many_requests_retries","res","waitTime","fetch","status","log","statusText","text","ok","reject","response","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","amount","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","executable","owner","lamports","rentEpoch","ParsedAccountDataResult","program","parsed","space","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","Array","isArray","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddressRpcResult","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","version","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","TransactionFromConfirmed","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","writable","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetConfirmedBlockRpcResult","blockhash","previousBlockhash","parentSlot","transactions","rewards","postBalance","rewardType","GetConfirmedTransactionRpcResult","GetParsedConfirmedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","feeCalculator","lamportsPerSignature","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","Connection","endpoint","commitment","_rpcEndpoint","urlParse","protocol","_rpcRequest","href","_commitment","_blockhashInfo","lastFetch","Date","transactionSignatures","simulatedSignatures","host","port","String","Number","_rpcWebSocket","RpcWebSocketClient","urlFormat","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSignatureNotification","_wsOnRootNotification","getBalanceAndContext","_buildArgs","unsafeRes","getBalance","catch","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getAccountInfo","getStakeActivation","getProgramAccounts","getParsedProgramAccounts","confirmTransaction","decodedSignature","assert","start","now","subscriptionCommitment","subscriptionId","confirmPromise","onSignature","removeSignatureListener","duration","toFixed","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSignatureStatus","values","getSignatureStatuses","params","getTransactionCount","getTotalSupply","getInflationGovernor","getEpochInfo","getEpochSchedule","getLeaderSchedule","getMinimumBalanceForRentExemption","getRecentBlockhashAndContext","getRecentPerformanceSamples","limit","getFeeCalculatorForBlockhash","getRecentBlockhash","getVersion","getConfirmedBlock","getConfirmedTransaction","getParsedConfirmedTransaction","getConfirmedSignaturesForAddress","startSlot","endSlot","getConfirmedSignaturesForAddress2","getNonceAndContext","accountInfo","getNonce","requestAirdrop","to","_recentBlockhash","disableCache","_pollingBlockhash","expired","_pollNewBlockhash","startTime","simulateTransaction","_disableBlockhashCaching","encodedTransaction","encoding","sigVerify","sendTransaction","sendRawTransaction","rawTransaction","sendEncodedTransaction","skipPreflight","preflightCommitment","traceIndent","logTrace","join","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","setInterval","notify","_updateSubscriptions","clearInterval","_resetSubscriptions","_subscribe","sub","rpcMethod","rpcArgs","call","_unsubscribe","unsubscribeId","_accountChangeSubscriptions","s","_programAccountChangeSubscriptions","_signatureSubscriptions","_slotSubscriptions","_rootSubscriptions","programKeys","slotKeys","signatureKeys","rootKeys","_rpcWebSocketIdleTimeout","close","connect","notification","onAccountChange","_accountChangeSubscriptionCounter","removeAccountChangeListener","subInfo","accountId","onProgramAccountChange","_programAccountChangeSubscriptionCounter","removeProgramAccountChangeListener","onSlotChange","_slotSubscriptionCounter","removeSlotChangeListener","override","extra","_signatureSubscriptionCounter","onRootChange","_rootSubscriptionCounter","removeRootChangeListener","sendAndConfirmTransaction","connection","sendOptions","JSON","stringify","encodeData","allocLength","layoutFields","decodeData","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","createAccount","transfer","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","Loader","chunkSize","getMinNumSignatures","Math","ceil","load","payer","balanceNeeded","programInfo","dataLayout","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","delegate","authorize","authorizeWithSeed","split","withdraw","deactivate","publicKeyCreate","ecdsaSign","secp256k1","PRIVATE_KEY_BYTES","ETHEREUM_ADDRESS_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","keccak_256","update","digest","createInstructionWithPublicKey","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","startsWith","substr","dataStart","ethAddressOffset","signatureOffset","messageDataOffset","numSignatures","signatureInstructionIndex","ethAddressInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","name","website","details","keybaseUsername","ValidatorInfo","info","fromConfigData","configKeyCount","configKeys","rawInfo","parse","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","va","authorizedVoterPubkey","authorizedWithdrawerPubkey","rootSlotValid","sendAndConfirmRawTransaction","devnet","testnet","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL"],"mappings":"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"}